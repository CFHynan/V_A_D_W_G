---
# file: roles/common/tasks/main.yml

# Docker installation.

- name: Add docker apt key
  apt_key: keyserver=hkp://p80.pool.sks-keyservers.net:80 id=58118E89F3A912897C070ADBF76221572C52609D
  tags:
    - Add_Docker_Key

- name: Update apt with repository
  apt_repository: repo='deb https://apt.dockerproject.org/repo ubuntu-zesty main' state=present
  tags:
    - Add_Docker_Repo
  
- name: Inform package manager
  apt: update_cache=yes
  tags:
    - Inform_Pkg_Mgr

- name: Install Docker
  apt: pkg=docker-engine force=yes
  tags:
    - Inst_Docker

- name: Docker registry fix # See: github.com/docker/distribution/issues/1874
  shell: cp "{{ ROOTDOCKER }}"/daemon.json /etc/docker;
         service docker restart
  run_once: true
  delegate_to: "{{ item }}"
  with_items:
    - 10.0.0.6
    - 10.0.0.7
  tags:
    - Docker_Reg_Fix

- name: Pull and run a private local Docker image registry container
  shell: docker pull registry:latest;
         docker run -d -p 5000:5000 registry:latest
  run_once: true
  delegate_to: 10.0.0.5
  tags:
    - Make_Docker_Reg

# Weave installation.

- name: Get Weave
  get_url:
    url: https://git.io/weave
    dest: /usr/local/bin/weave
    mode: 0755
  tags:
    - Get_Weave

- name: Install and launch a Weave Net (subnet allocation 10.2.0.0) - Target1
  shell: if [ $(docker ps -a | grep -c weaveproxy) != 1 ]; then weave launch --ipalloc-range 10.2.0.0/16; fi
  run_once: true
  delegate_to: 10.0.0.5
  tags:
    - Inst_Weave_1

- name: Install and launch a Weave Net (subnet allocation 10.2.0.0) - Target2
  shell: if [ $(docker ps -a | grep -c weaveproxy) != 1 ]; then weave launch --ipalloc-range 10.2.0.0/16 10.0.0.5; fi
  run_once: true
  delegate_to: 10.0.0.6
  tags:
    - Inst_Weave_2

- name: Install and launch a Weave Net (subnet allocation 10.2.0.0) - Target3
  shell: if [ $(docker ps -a | grep -c weaveproxy) != 1 ]; then weave launch --ipalloc-range 10.2.0.0/16 10.0.0.5; fi
  run_once: true
  delegate_to: 10.0.0.7
  tags:
    - Inst_Weave_3

# Install and compile Go at v1.4 (go1.4-bootstrap-20170531) => v1.7 to allow for dependency compatibility and the creation of static binaries (Target 1).

- name: Clone Go repo 1
  shell: rm -rf "{{ ROOTGOINSTALL }}";
         mkdir "{{ ROOTGOINSTALL }}";
         git clone https://go.googlesource.com/go "{{ ROOTGOINSTALL }}"
  args:
    warn: no
  run_once: true
  delegate_to: 10.0.0.5
  tags:
    - Clone_1

- name: Checkout Go v1.4
  git: repo=/usr/local/go/.git
       dest=/usr/local/go
       version=release-branch.go1.4
  run_once: true
  delegate_to: 10.0.0.5
  tags:
    - Checkout_1.4

- name: Compile Go v1.4
  shell: CGO_ENABLED=0 ./make.bash
  args:
    chdir: /usr/local/go/src
  run_once: true
  delegate_to: 10.0.0.5
  tags:
    - Compile_1.4

- name: Clone Go repo 2
  shell: mv /usr/local/go /usr/local/go1.4;
         rm -rf "{{ ROOTGOINSTALL }}";
         mkdir "{{ ROOTGOINSTALL }}";
         git clone https://go.googlesource.com/go "{{ ROOTGOINSTALL }}"
  args:
    warn: no
  run_once: true
  delegate_to: 10.0.0.5
  tags:
    - Clone_2

- name: Checkout Go v1.7
  git: repo=/usr/local/go/.git
       dest=/usr/local/go
       version=go1.7
  run_once: true
  delegate_to: 10.0.0.5
  tags:
    - Checkout_1.7

- name: Compile Go v1.7
  environment:
    "{{ EXPGOROOT_BOOTSTRAP }}"
  shell: CGO_ENABLED=0 ./make.bash
  args:
    chdir: /usr/local/go/src
  run_once: true
  delegate_to: 10.0.0.5
  tags:
    - Compile_1.7

# Create Go workspace, get dependencies and make static Go binary (Target1).

- name: Set Go workspace and get the gorilla
  environment:
    "{{ EXPGOPATH }}"
  shell: '"{{ ROOTGOINSTALL }}"/bin/go get github.com/gorilla/mux'
  run_once: true
  delegate_to: 10.0.0.5
  tags:
    - GoWS_Gorilla

- name: Copy Go source to workspace 
  shell: rm -rf "{{ ROOTGOPATH }}"/src/getip;
         mkdir "{{ ROOTGOPATH }}"/src/getip;
         cp "{{ ROOTGOCODE }}"/getip/getip.go "{{ ROOTGOPATH }}"/src/getip 
  args:
    warn: no
  run_once: true
  delegate_to: 10.0.0.5
  tags:
    - Copy_Src_GoWS

- name: Make static Go binary (REST service)
  environment:
    "{{ EXPGOPATH }}"
  shell: CGO_ENABLED=0 "{{ ROOTGOINSTALL }}"/bin/go install -a -installsuffix cgo getip
  run_once: true
  delegate_to: 10.0.0.5
  tags:
    - Make_Go_Bin

# Create Docker container service utilizing Go binary.

- name: Setup Docker image creation structure
  shell: rm -rf "{{ USRLOCALPATH }}"/docker;
         mkdir "{{ USRLOCALPATH }}"/docker;
         cp "{{ ROOTDOCKER }}"/Dockerfile.getip "{{ ROOTDOCKER }}"/Dockerfile.getip_test "{{ ROOTTESTCODE }}"/lb/lb_test.sh "{{ USRLOCALPATH }}"/docker;
         cp "{{ USRLOCALPATH }}"/gows/bin/getip "{{ USRLOCALPATH }}"/docker
  args:
    warn: no
  run_once: true
  delegate_to: 10.0.0.5
  tags:
    - Docker_Prep

- name: Create Docker image with REST service
  shell: tar cv --files-from /dev/null | docker import - denada;
         docker build -t getip .
  args:
    chdir: /usr/local/docker
    warn: no
  run_once: true
  delegate_to: 10.0.0.5
  tags:
    - Make_Docker_Image

# Push image to registry and pull for Target2.

- name: Push Docker image getip to registry
  shell: docker tag getip localhost:5000/getip:latest;
         docker push localhost:5000/getip:latest
  run_once: true
  delegate_to: 10.0.0.5
  tags:
    - Push_Image_getip

- name: Pull Docker image getip from registry for Target2
  shell: docker pull 10.0.0.5:5000/getip:latest
  run_once: true
  delegate_to: 10.0.0.6
  tags:
    - Pull_Image

# Run getip containers.	

- name: Run REST service containers registered with Weave DNS
  shell: eval $(weave env);
         docker run -d -h loadbalance.weave.local getip;
         docker run -d -h loadbalance.weave.local getip;
         docker run -d -h loadbalance.weave.local getip
  run_once: true
  delegate_to: "{{ item }}"
  with_items:
    - 10.0.0.5
    - 10.0.0.6
  tags:
    - Run_getip_Cons

# Perform some tests via Target3.
# Output Weave status and check that containerised app getip is load balancing.

- name: Generate Weave status logs
  shell: weave status >> /var/log/weave_status.log;
         weave dns >> /var/log/weave_status.log
  run_once: true
  delegate_to: "{{ item }}"
  with_items:
    - 10.0.0.5
    - 10.0.0.6
    - 10.0.0.7	
  tags:
    - Gen_Weave_Logs

- name: Pull a Ubuntu Docker image and bake in a test script
  shell: docker pull ubuntu:17.04;
         docker build -t getip_test . -f Dockerfile.getip_test
  args:
    chdir: /usr/local/docker
    warn: no
  run_once: true
  delegate_to: 10.0.0.5
  tags:
    - Pull_Bake_Test

- name: Push Docker image getip_test to registry
  shell: docker tag getip_test localhost:5000/getip_test:latest;
         docker push localhost:5000/getip_test:latest
  run_once: true
  delegate_to: 10.0.0.5
  tags:
    - Push_Image_getip_test

- name: Pull Docker image getip_test from registry for Target3
  shell: docker pull 10.0.0.5:5000/getip_test:latest
  run_once: true
  delegate_to: 10.0.0.7
  tags:
    - Pull_Image_getip_test

- name: Run test container registered with Weave DNS and test script
  shell: eval $(weave env);
         docker run --name handy_testy -d -ti -h test.weave.local 10.0.0.5:5000/getip_test;
         docker exec handy_testy lb_test.sh
  run_once: true
  delegate_to: 10.0.0.7
  tags:
    - Run_getip_test_Con

####################	